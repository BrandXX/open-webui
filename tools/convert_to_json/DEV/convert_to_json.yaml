"""
title: Convert to JSON
author: BrandXX/UserX
version: 1.0.4-RC
license: MIT
description: Converts data to JSON format and returns it in a markdown code block.
GitHub: https://github.com/BrandXX/open-webui/blob/main/tools/convert_to_json/
Notes:
Version 1.0.4-RC
- Improved the reliability of the LLM to call the 'Convert to JSON' tool
  - Contemplating changing the name to 'JSON Tool'
- Added 'COMPACT_PRINT' Valve
  - OFF: Pretty-Printed JSON
    - Toggle 'COMPACT_PRINT' Valve OFF for Pretty-Printed JSON
  - ON: Compact JSON
    - Toggle 'COMPACT_PRINT' Valve ON for one Array per line
- Added 'SINGLE_LINE' Valve
  - Toggle 'SINGLE_LINE' Valve ON for a single line of JSON
- Increased the reliability of the JSON output to be in a properly formatted markdown code block
- Refactored code to increase dependability and reliability
- Restructured and provided a more detailed and reliable instruction set to the LLM
- (Undecided Change) Contemplating changing the name from 'Convert to JSON' to 'JSON Tool''
- Updated Description
- Updated documentation at https://github.com/BrandXX/open-webui/edit/main/tools/convert_to_json/readme.md
- Enhance instruction clarity to emphasize the code block requirement.
- Add a marker to signal the tool invocation explicitly
- Improve logging to ensure any issues are quickly identified.
"""

import json
from pydantic import BaseModel, Field
import logging

logging.basicConfig(level=logging.DEBUG)

class Tools:
    """
    A class to provide various tools for data manipulation.

    Attributes:
    -----------
    citation : bool
        A flag to trigger a citation if a return occurs within the tool.
    valves : Tools.Valves
        An instance of the Valves class to manage settings for the tools.
    """

    class Valves(BaseModel):
        """
        A class to represent the settings for the Tools class.

        Attributes:
        -----------
        JSON_INDENT : int
            The indentation level for the returned JSON.
        COMPACT_PRINT : bool
            A flag to toggle between pretty-printed JSON and compact JSON.
        SINGLE_LINE : bool
            A flag to toggle outputting JSON in a single line within a code block with one carriage return before and after.
        """

        JSON_INDENT: int = Field(
            default=4,
            description="The indentation level for the returned JSON.",
        )
        COMPACT_PRINT: bool = Field(
            default=False,
            description="Toggle between pretty-printed JSON and compact JSON.",
        )
        SINGLE_LINE: bool = Field(
            default=False,
            description="Toggle outputting JSON in a single line within a code block with one carriage return before and after.",
        )

    def __init__(self):
        self.citation = (
            True  # Attribute to trigger a citation if a return occurs within the tool
        )
        self.valves = self.Valves()

    def convert_to_json(self, data) -> str:
        """
        Convert provided data to JSON format and return it with an instruction to format it with the supplied indent value in a code block.

        :param data: The data to be converted to JSON. This can be a dictionary or any serializable Python object.
        :type data: dict
        :return: The JSON string with an instruction for the LLM to format it with the supplied indent value in a code block.
        :rtype: str
        """
        try:
            if self.valves.SINGLE_LINE:
                json_data = json.dumps(data)
                instruction = (
                    "!!IMPORTANT!! Please format the following JSON in a code block as a single compact line without extra spaces:\n"
                    "```json\n{json_data}\n```"
                )
            elif self.valves.COMPACT_PRINT:
                json_data = json.dumps(data)
                instruction = (
                    "!!IMPORTANT!! Please format the following JSON in a code block as compact JSON:\n"
                    "```json\n{json_data}\n```"
                )
            else:
                json_data = json.dumps(data, indent=self.valves.JSON_INDENT)
                instruction = (
                    f"!!IMPORTANT!! Please format the following JSON in a code block with an indent level of {self.valves.JSON_INDENT}:\n"
                    f"```json\n{json_data}\n```"
                )

            final_output = f"Convert to JSON:\n{instruction}"
            logging.debug(f"Formatted JSON instruction:\n{final_output}")
            return final_output
        except (TypeError, ValueError) as e:
            error_message = f"Error converting data to JSON: {str(e)}"
            logging.error(error_message)
            return error_message
