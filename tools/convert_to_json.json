"""
Title: Convert to JSON
Author: BrandXX/UserX
Version: 1.0.1
License: MIT
Description: This tool converts data provided from the chat into JSON format and returns it in a markdown code block.

Requirements:
    - Python 3.7+
    - json (standard library)

Tested with:
    - llama3:8b-instruct-fp16
    - llava-llama3:8b-v1.1-fp16
    - dolphin-mistral:7b-v2.8-fp16

Usage:
    Call the function `convert_to_json(data)` with your data as an argument.
    Example:
        data = {"name": "John", "age": 30}
        print(convert_to_json(data))

Changelog:
    Version 1.0.1:
        - Added comments to the function for better understanding.
        - Added GitHub Repo (under construction)
    Version 1.0:
        - Initial release.

Contact:
    Email: N/A
    GitHub: https://github.com/BrandXX/open-webui
    
Dependencies:
    - None (uses Python standard library)

Future Enhancements:
    - Add GitHub repo
    - Add Documentation
    - Add support for more complex data structures.
    - Implement validation for input data.
    - Add SaveAs feature

Additional Notes:
    - A citation is added as an indicator of successful execution.
"""

import json


class Tools:
    def __init__(self):
        self.citation = (
            True  # Attribute to trigger a citation if a return occurs within the tool
        )

    def convert_to_json(self, data) -> str:
        """
        Convert provided data to JSON format and return it with an instruction to format it in a ```code block```.

        :param data: The data to be converted to JSON. This can be a dictionary or any serializable Python object.
        :return: The JSON string with an instruction for the LLM to format it in a ```code block```.
        """
        try:
            # Convert the provided data to a JSON string with indentation for readability
            json_data = json.dumps(data, indent=4)
            # Instruction for the LLM to format the JSON in a code block
            instruction = "Please format the following JSON in a ```code block```:\n\n"
            formatted_json = instruction + json_data
            print(f"Debug: Instruction with JSON data:\n{formatted_json}")
            return formatted_json
        except (TypeError, ValueError) as e:
            # Return an error message if the data cannot be converted to JSON
            error_message = f"Error converting data to JSON: {str(e)}"
            print(f"Debug: Error message:\n{error_message}")
            return error_message


# Example usage:
tools = Tools()
data = {"name": "John Doe", "age": 30, "city": "New York"}
output = tools.convert_to_json(data)
print(output)
